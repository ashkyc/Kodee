{"ast":null,"code":"import axios from \"axios\";\nimport * as serviceHelper from \"./serviceHelper\";\nconst entity = \"https://localhost:50001/api/addresses/\";\n\nconst create = payload => {\n  const config = {\n    method: \"POST\",\n    url: entity,\n    data: payload,\n    withCredentials: true,\n    crossdomain: true,\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  };\n  return axios(config).then(serviceHelper.onGlobalSuccess).catch(serviceHelper.onGlobalError);\n};\n\nconst getCurrent = payload => {\n  const config = {\n    method: \"POST\",\n    url: entity + \"weather\",\n    data: payload,\n    withCredentials: true,\n    crossdomain: true,\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  };\n  return axios(config).then(serviceHelper.onGlobalSuccess).catch(serviceHelper.onGlobalError);\n};\n\nconst getForecast = payload => {\n  const config = {\n    method: \"POST\",\n    url: entity + \"weather\",\n    data: payload,\n    withCredentials: true,\n    crossdomain: true,\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  };\n  return axios(config).then(serviceHelper.onGlobalSuccess).catch(serviceHelper.onGlobalError);\n};\n\nexport { create, getCurrent, getForecast };","map":{"version":3,"sources":["C:\\Kodee\\frontend\\src\\services\\addressService.js"],"names":["axios","serviceHelper","entity","create","payload","config","method","url","data","withCredentials","crossdomain","headers","then","onGlobalSuccess","catch","onGlobalError","getCurrent","getForecast"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AAEA,MAAMC,MAAM,GAAG,wCAAf;;AAEA,MAAMC,MAAM,GAAGC,OAAO,IAAI;AACxB,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,MADK;AAEbC,IAAAA,GAAG,EAAEL,MAFQ;AAGbM,IAAAA,IAAI,EAAEJ,OAHO;AAIbK,IAAAA,eAAe,EAAE,IAJJ;AAKbC,IAAAA,WAAW,EAAE,IALA;AAMbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AANI,GAAf;AAUA,SAAOX,KAAK,CAACK,MAAD,CAAL,CACJO,IADI,CACCX,aAAa,CAACY,eADf,EAEJC,KAFI,CAEEb,aAAa,CAACc,aAFhB,CAAP;AAGD,CAdD;;AAgBA,MAAMC,UAAU,GAAGZ,OAAO,IAAI;AAC5B,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,MADK;AAEbC,IAAAA,GAAG,EAAEL,MAAM,GAAG,SAFD;AAGbM,IAAAA,IAAI,EAAEJ,OAHO;AAIbK,IAAAA,eAAe,EAAE,IAJJ;AAKbC,IAAAA,WAAW,EAAE,IALA;AAMbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AANI,GAAf;AAUA,SAAOX,KAAK,CAACK,MAAD,CAAL,CACJO,IADI,CACCX,aAAa,CAACY,eADf,EAEJC,KAFI,CAEEb,aAAa,CAACc,aAFhB,CAAP;AAGD,CAdD;;AAgBA,MAAME,WAAW,GAAGb,OAAO,IAAI;AAC7B,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,MADK;AAEbC,IAAAA,GAAG,EAAEL,MAAM,GAAG,SAFD;AAGbM,IAAAA,IAAI,EAAEJ,OAHO;AAIbK,IAAAA,eAAe,EAAE,IAJJ;AAKbC,IAAAA,WAAW,EAAE,IALA;AAMbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AANI,GAAf;AAUA,SAAOX,KAAK,CAACK,MAAD,CAAL,CACJO,IADI,CACCX,aAAa,CAACY,eADf,EAEJC,KAFI,CAEEb,aAAa,CAACc,aAFhB,CAAP;AAGD,CAdD;;AAgBA,SAASZ,MAAT,EAAiBa,UAAjB,EAA6BC,WAA7B","sourcesContent":["import axios from \"axios\";\r\nimport * as serviceHelper from \"./serviceHelper\";\r\n\r\nconst entity = \"https://localhost:50001/api/addresses/\";\r\n\r\nconst create = payload => {\r\n  const config = {\r\n    method: \"POST\",\r\n    url: entity,\r\n    data: payload,\r\n    withCredentials: true,\r\n    crossdomain: true,\r\n    headers: {\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  };\r\n  return axios(config)\r\n    .then(serviceHelper.onGlobalSuccess)\r\n    .catch(serviceHelper.onGlobalError);\r\n};\r\n\r\nconst getCurrent = payload => {\r\n  const config = {\r\n    method: \"POST\",\r\n    url: entity + \"weather\",\r\n    data: payload,\r\n    withCredentials: true,\r\n    crossdomain: true,\r\n    headers: {\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  };\r\n  return axios(config)\r\n    .then(serviceHelper.onGlobalSuccess)\r\n    .catch(serviceHelper.onGlobalError);\r\n};\r\n\r\nconst getForecast = payload => {\r\n  const config = {\r\n    method: \"POST\",\r\n    url: entity + \"weather\",\r\n    data: payload,\r\n    withCredentials: true,\r\n    crossdomain: true,\r\n    headers: {\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  };\r\n  return axios(config)\r\n    .then(serviceHelper.onGlobalSuccess)\r\n    .catch(serviceHelper.onGlobalError);\r\n};\r\n\r\nexport { create, getCurrent, getForecast };\r\n"]},"metadata":{},"sourceType":"module"}